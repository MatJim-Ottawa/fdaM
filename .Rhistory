fdParobj = fdPar(fdobj, Lfdobj, lambda)
smoothResult = smooth.GLM(argvals, y, fdParobj, 'family', 'normal')
setwd("~/MATLAB/Repositories/fdaM")
source("ycheck.R")
source("argcheck.R")
source("constrain.R")
source("fdParcheck.R")
source("glm.fda.R")
source("smooth.GLM.R")
printf <- function(...) cat(sprintf(...))
#  tests for function smooth.GLM
#  ----------------  normal link with no covariates  --------------------
library(pracma)
library(fda)
n       = 101
argvals = linspace(0,2*pi,n)
y0      = sin(2*argvals)
y02     = cos(2*argvals)
sig     = 0.2
y       = y0 + sig * randn(n,1)
y       = cbind(y, y02 + sig * randn(n,1))
basisobj = create.bspline.basis(c(0,2*pi),n+2)
basismat = eval.basis(argvals, basisobj)
Lfdobj = int2Lfd(2)
penmat = eval.penalty(basisobj,Lfdobj)
lambda  = 1e-1
lamRmat = lambda * penmat
glmresult = glm.fda(basismat, y, 'normal', lamRmat)
fdobj = fd(glmresult$coef,glmresult$basisobj)
plotfit.fd(y, argvals, fdobj)
fdParobj = fdPar(fdobj, Lfdobj, lambda)
smoothResult = smooth.GLM(argvals, y, fdParobj, 'family', 'normal')
debugSource('~/MATLAB/Repositories/fdaM/smooth.GLM.R')
debugSource('~/MATLAB/Repositories/fdaM/smooth.GLM.R')
source('~/MATLAB/Repositories/fdaM/smooth.GLM.R')
debug("smooth.GLM")
smoothResult = smooth.GLM(argvals, y, fdParobj, 'family', 'normal')
wtcheck
smoothResult = smooth.GLM(argvals, y, fdParobj, 'family', 'normal')
smoothResult = smooth.GLM(argvals, y, fdParobj, 'family', 'normal')
wlist
wlist = wtcheck(n,weight)
wtvec
smoothResult = smooth.GLM(argvals, y, fdParobj, 'family', 'normal')
weight
smoothResult = smooth.GLM(argvals, y, fdParobj, 'family', 'normal')
smoothResult = smooth.GLM(argvals, y, fdParobj, 'family', 'normal')
weight
smoothResult = smooth.GLM(argvals, y, fdParobj, NULL , 'normal')
source('~/MATLAB/Repositories/fdaM/smooth.GLM.R')
smoothResult = smooth.GLM(argvals, y, fdParobj, NULL , familty='normal')
smoothResult = smooth.GLM(argvals, y, fdParobj, NULL , family='normal')
smoothResult = smooth.GLM(argvals, y, fdParobj, NULL , family='normal')
debug(smooth.GLM)
smoothResult = smooth.GLM(argvals, y, fdParobj, NULL , family='normal')
smoothResult = smooth.GLM(argvals, y, fdParobj, NULL , family='normal')
argvals
class(argvals)
basisobj
max(argvals)
min(argvals)
fdParobj = fdPar(basismat, Lfdobj, lambda)
fdParobj = fdPar(basismat, Lfdobj, lambda)
smoothResult = smooth.GLM(argvals, y, fdParobj, NULL ,'normal')
smoothResult = smooth.GLM(argvals, y, fdParobj ,family = 'normal')
glmresult
basismat
max(basismat
)
n       = 101
argvals = linspace(0,2*pi,n)
y0      = sin(2*argvals)
y02     = cos(2*argvals)
sig     = 0.2
y       = y0 + sig * randn(n,1)
y       = cbind(y, y02 + sig * randn(n,1))
basisobj = create.bspline.basis(c(0,2*pi),n+2)
basismat = eval.basis(argvals, basisobj)
n       = 101
argvals = linspace(0,2*pi,n)
y0      = sin(2*argvals)
y02     = cos(2*argvals)
sig     = 0.2
y       = y0 + sig * randn(n,1)
y       = cbind(y, y02 + sig * randn(n,1))
basisobj = create.bspline.basis(c(0,2*pi),n+2)
basismat = eval.basis(argvals, basisobj)
max(basismat)
basisobj
basismat
smoothResult = smooth.GLM(argvals, y, fdParobj ,family = 'normal')
basisobj
argvals
fdPAr
fdPar
fd
class(basismat)
class(basisobj)
fdParobj = fdPar(basisobj, Lfdobj, lambda)
smoothResult = smooth.GLM(argvals, y, fdParobj ,family = 'normal')
basismat
source('~/MATLAB/Repositories/fdaM/smooth.GLM.R')
source('~/MATLAB/Repositories/fdaM/smooth.GLM.R')
source('~/MATLAB/Repositories/fdaM/smooth.GLM.R')
smoothResult = smooth.GLM(argvals, y, fdParobj ,family = 'normal')
smoothResult
plotfit.fd(y, argvals, fdobj)
df
gcv
n       = 501
argvals = linspace(0,1,n)
y0      = sin(4*pi*argvals)
sig     = 0.5
y = matrix(0,n,1)
sy0 + sig.*randn(n,1) >= 0
y0 + sig.*randn(n,1) >= 0.0
y[y0 + sig*randn(n,1) >= 0.0]
y[y0 + sig*randn(n,1) >= 0.0] = 1
y
basisobj = create.bspline.basis(c(0,1),13)
basismat = eval.basis(argvals, basisobj)
Lfdobj = int2Lfd(2)
penmat = eval.penalty(basisobj,Lfdobj)
lambda  = 1e-4
lamRmat = lambda*penmat
source("ycheck.R")
source("argcheck.R")
source("constrain.R")
source("fdParcheck.R")
source("glm.fda.R")
source("smooth.GLM.R")
printf <- function(...) cat(sprintf(...))
#  tests for function smooth.GLM
#  ----------------  normal link with no covariates  --------------------
library(pracma)
library(fda)
n       = 101
argvals = linspace(0,2*pi,n)
y0      = sin(2*argvals)
y02     = cos(2*argvals)
sig     = 0.2
y       = y0 + sig * randn(n,1)
y       = cbind(y, y02 + sig * randn(n,1))
basisobj = create.bspline.basis(c(0,2*pi),n+2)
basismat = eval.basis(argvals, basisobj)
Lfdobj = int2Lfd(2)
penmat = eval.penalty(basisobj,Lfdobj)
lambda  = 1e-1
lamRmat = lambda * penmat
glmresult = glm.fda(basismat, y, 'normal', lamRmat)
fdobj = fd(glmresult$coef,basisobj)
plotfit.fd(y, argvals, fdobj)
n       = 101
argvals = linspace(0,2*pi,n)
y0      = sin(2*argvals)
sig     = 0.2
y       = y0 + sig * randn(n,1)
sigcov  = 0.1
covariates = randn(n,1)
beta    = 1
y       = y + covariates*beta
basisobj = create.bspline.basis(c(0,2*pi),11)
basismat = eval.basis(argvals, basisobj)
Lfdobj = int2Lfd(2)
penmat = eval.penalty(basisobj,Lfdobj)
lambda  = 1
lamRmat = lambda * penmat
fdParobj = fdPar(basisobj, Lfdobj, lambda)
smoothResult = smooth.GLM(argvals, y, fdParobj, family = 'normal', covariates=covariates)
plotfit.fd(y, argvals, fdobj)
smoothResult$beta
smoothResult$df
smoothResult$gcv
smoothResult$SSE
smoothResult$dev
debug(glm.fda)
smoothResult = smooth.GLM(argvals, y, fdParobj, family = 'normal', covariates=covariates)
source('~/MATLAB/Repositories/fdaM/glm.fda.R')
debug(smooth.GLM)
smoothResult = smooth.GLM(argvals, y, fdParobj, family = 'normal', covariates=covariates)
source('~/MATLAB/Repositories/fdaM/smooth.GLM.R')
n       = 501
argvals = linspace(0,1,n)
y0      = sin(4*pi*argvals)
sig     = 0.5
y = matrix(0,n,1)
y[y0 + sig*randn(n,1) >= 0.0] = 1
basisobj = create.bspline.basis(c(0,1),13)
basismat = eval.basis(argvals, basisobj)
Lfdobj = int2Lfd(2)
penmat = eval.penalty(basisobj,Lfdobj)
lambda  = 1e-4
lamRmat = lambda*penmat
glmResult = glm.fda(basismat, y, 'binomial', lamRmat)
debug(glm.fda)
n       = 501
argvals = linspace(0,1,n)
y0      = sin(4*pi*argvals)
sig     = 0.5
y = matrix(0,n,1)
y[y0 + sig*randn(n,1) >= 0.0] = 1
basisobj = create.bspline.basis(c(0,1),13)
basismat = eval.basis(argvals, basisobj)
Lfdobj = int2Lfd(2)
penmat = eval.penalty(basisobj,Lfdobj)
lambda  = 1e-4
lamRmat = lambda*penmat
glmResult = glm.fda(basismat, y, 'binomial', lamRmat)
source('~/MATLAB/Repositories/fdaM/glm.fda.R')
n       = 501
argvals = linspace(0,1,n)
y0      = sin(4*pi*argvals)
sig     = 0.5
y = matrix(0,n,1)
y[y0 + sig*randn(n,1) >= 0.0] = 1
basisobj = create.bspline.basis(c(0,1),13)
basismat = eval.basis(argvals, basisobj)
Lfdobj = int2Lfd(2)
penmat = eval.penalty(basisobj,Lfdobj)
lambda  = 1e-4
lamRmat = lambda*penmat
glmResult = glm.fda(basismat, y, 'binomial', lamRmat)
debug(glm.fda)
n       = 501
argvals = linspace(0,1,n)
y0      = sin(4*pi*argvals)
sig     = 0.5
y = matrix(0,n,1)
y[y0 + sig*randn(n,1) >= 0.0] = 1
basisobj = create.bspline.basis(c(0,1),13)
basismat = eval.basis(argvals, basisobj)
Lfdobj = int2Lfd(2)
penmat = eval.penalty(basisobj,Lfdobj)
lambda  = 1e-4
lamRmat = lambda*penmat
glmResult = glm.fda(basismat, y, 'binomial', lamRmat)
source('~/MATLAB/Repositories/fdaM/glm.fda.R')
n       = 501
argvals = linspace(0,1,n)
y0      = sin(4*pi*argvals)
sig     = 0.5
y = matrix(0,n,1)
y[y0 + sig*randn(n,1) >= 0.0] = 1
basisobj = create.bspline.basis(c(0,1),13)
basismat = eval.basis(argvals, basisobj)
Lfdobj = int2Lfd(2)
penmat = eval.penalty(basisobj,Lfdobj)
lambda  = 1e-4
lamRmat = lambda*penmat
glmResult = glm.fda(basismat, y, 'binomial', lamRmat)
x = 1:10
x
constrain(x,1,2)
apply(x,1,function(y) constrain(y,1,2))
apply(x,1,function(y) constrain(y,1,2))
dim(X)
class(X)
class(x)
matrix(x,1,10)
apply(matrix(x,1,10),1,function(y) constrain(y,1,2))
apply(matrix(x,1,10),2,function(y) constrain(y,1,2))
apply(matrix(x,1,10),1:2,function(y) constrain(y,1,2))
apply(matrix(x,1,10),1:2,function(y) constrain(y,4,5))
constrain
source('~/MATLAB/Repositories/fdaM/constrain.R')
apply(matrix(x,1,10),1:2,function(y) constrain(y,4,5))
apply(matrix(x,1,10),1:2,function(y) constrain(y,4,5.5))
lo = 1
up = 3
apply(matrix(x,1,10),1:2,function(y) constrain(y,lo,up))
apply(matrix(x,1,10),1:2,function(y) constrain(y,lo,up)^(-1/2))
source('~/MATLAB/Repositories/fdaM/glm.fda.R')
n       = 501
argvals = linspace(0,1,n)
y0      = sin(4*pi*argvals)
sig     = 0.5
y = matrix(0,n,1)
y[y0 + sig*randn(n,1) >= 0.0] = 1
basisobj = create.bspline.basis(c(0,1),13)
basismat = eval.basis(argvals, basisobj)
Lfdobj = int2Lfd(2)
penmat = eval.penalty(basisobj,Lfdobj)
lambda  = 1e-4
lamRmat = lambda*penmat
glmResult = glm.fda(basismat, y, 'binomial', lamRmat)
trace
stacktrace
source('~/MATLAB/Repositories/fdaM/glm.fda.R')
n       = 501
argvals = linspace(0,1,n)
y0      = sin(4*pi*argvals)
sig     = 0.5
y = matrix(0,n,1)
y[y0 + sig*randn(n,1) >= 0.0] = 1
basisobj = create.bspline.basis(c(0,1),13)
basismat = eval.basis(argvals, basisobj)
Lfdobj = int2Lfd(2)
penmat = eval.penalty(basisobj,Lfdobj)
lambda  = 1e-4
lamRmat = lambda*penmat
glmResult = glm.fda(basismat, y, 'binomial', lamRmat)
debug(glm.fda)
n       = 501
argvals = linspace(0,1,n)
y0      = sin(4*pi*argvals)
sig     = 0.5
y = matrix(0,n,1)
y[y0 + sig*randn(n,1) >= 0.0] = 1
basisobj = create.bspline.basis(c(0,1),13)
basismat = eval.basis(argvals, basisobj)
Lfdobj = int2Lfd(2)
penmat = eval.penalty(basisobj,Lfdobj)
lambda  = 1e-4
lamRmat = lambda*penmat
glmResult = glm.fda(basismat, y, 'binomial', lamRmat)
source('~/MATLAB/Repositories/fdaM/smooth.GLM.R')
is.fd
fdPar
n       = 501
argvals = linspace(0,1,n)
y0      = sin(4*pi*argvals)
sig     = 0.5
y = matrix(0,n,1)
y[y0 + sig*randn(n,1) >= 0.0] = 1
basisobj = create.bspline.basis(c(0,1),13)
basismat = eval.basis(argvals, basisobj)
Lfdobj = int2Lfd(2)
penmat = eval.penalty(basisobj,Lfdobj)
lambda  = 1e-4
lamRmat = lambda*penmat
glmResult = glm.fda(basismat, y, 'binomial', lamRmat)
fdobj = fd(glmResult$coef,basisobj)
plotfit.fd(y, argvals, fdobj)
fdParobj = fdPar(basisobj, Lfdobj, lambda)
source('~/MATLAB/Repositories/fdaM/smooth.GLM.R')
clear
n       = 501
argvals = linspace(0,1,n)
y0      = sin(4*pi*argvals)
sig     = 0.5
y = matrix(0,n,1)
y[y0 + sig*randn(n,1) >= 0.0] = 1
basisobj = create.bspline.basis(c(0,1),13)
basismat = eval.basis(argvals, basisobj)
Lfdobj = int2Lfd(2)
penmat = eval.penalty(basisobj,Lfdobj)
lambda  = 1e-4
lamRmat = lambda*penmat
glmResult = glm.fda(basismat, y, 'binomial', lamRmat)
fdobj = fd(glmResult$coef,basisobj)
plotfit.fd(y, argvals, fdobj)
fdParobj = fdPar(basisobj, Lfdobj, lambda)
source('~/MATLAB/Repositories/fdaM/glm.fda.R')
source('~/MATLAB/Repositories/fdaM/glm.fda.R')
n       = 501
argvals = linspace(0,1,n)
y0      = sin(4*pi*argvals)
sig     = 0.5
y = matrix(0,n,1)
y[y0 + sig*randn(n,1) >= 0.0] = 1
basisobj = create.bspline.basis(c(0,1),13)
basismat = eval.basis(argvals, basisobj)
Lfdobj = int2Lfd(2)
penmat = eval.penalty(basisobj,Lfdobj)
lambda  = 1e-4
lamRmat = lambda*penmat
glmResult = glm.fda(basismat, y, 'binomial', lamRmat)
fdobj = fd(glmResult$coef,basisobj)
plotfit.fd(y, argvals, fdobj)
fdParobj = fdPar(basisobj, Lfdobj, lambda)
class(fdobj)
is.fd(fdobj)
fdParobj
class(fdParobj)
is.fd(fdParobj)
is.fdPar
is.basis(fdParobj)
fdParobj
class(fdParobj)
is.fd(fdParobj)
fda
fdParcheck
fdParcheck
source('~/MATLAB/Repositories/fdaM/fdParcheck.R')
L = list(a,b,c)
L = list(a='a',b='b',c='c')
L(1)
L[1]
install.packages("RUnit")
n       = 501
argvals = linspace(0,1,n)
y0      = sin(4*pi*argvals)
sig     = 0.5
y = matrix(0,n,1)
y[y0 + sig*randn(n,1) >= 0.0] = 1
basisobj = create.bspline.basis(c(0,1),13)
basismat = eval.basis(argvals, basisobj)
Lfdobj = int2Lfd(2)
penmat = eval.penalty(basisobj,Lfdobj)
lambda  = 1e-4
lamRmat = lambda*penmat
glmResult = glm.fda(basismat, y, 'binomial', lamRmat)
fdobj = fd(glmResult$coef,basisobj)
plotfit.fd(y, argvals, fdobj)
fdParobj = fdPar(basisobj, Lfdobj, lambda)
smoothResult = smooth.GLM(argvals, y, fdParobj, family = 'binomial')
plot(fdobj)
source("ycheck.R")
source("argcheck.R")
source("constrain.R")
source("fdParcheck.R")
source("glm.fda.R")
source("smooth.GLM.R")
printf <- function(...) cat(sprintf(...))
n       = 501
argvals = linspace(0,1,n)
y0      = sin(4*pi*argvals)
sig     = 0.5
y = matrix(0,n,1)
y[y0 + sig*randn(n,1) >= 0.0] = 1
basisobj = create.bspline.basis(c(0,1),13)
basismat = eval.basis(argvals, basisobj)
Lfdobj = int2Lfd(2)
penmat = eval.penalty(basisobj,Lfdobj)
lambda  = 1e-4
lamRmat = lambda*penmat
glmResult = glm.fda(basismat, y, 'binomial', lamRmat)
fdobj = fd(glmResult$coef,basisobj)
plotfit.fd(y, argvals, fdobj)
fdParobj = fdPar(basisobj, Lfdobj, lambda)
smoothResult = smooth.GLM(argvals, y, fdParobj, family = 'binomial')
plot(fdobj)
setwd("~/MATLAB/Repositories/fdaM")
n       = 501
argvals = linspace(0,1,n)
y0      = sin(4*pi*argvals)
sig     = 0.5
y = matrix(0,n,1)
y[y0 + sig*randn(n,1) >= 0.0] = 1
basisobj = create.bspline.basis(c(0,1),13)
basismat = eval.basis(argvals, basisobj)
Lfdobj = int2Lfd(2)
penmat = eval.penalty(basisobj,Lfdobj)
lambda  = 1e-4
lamRmat = lambda*penmat
glmResult = glm.fda(basismat, y, 'binomial', lamRmat)
fdobj = fd(glmResult$coef,basisobj)
plotfit.fd(y, argvals, fdobj)
fdParobj = fdPar(basisobj, Lfdobj, lambda)
smoothResult = smooth.GLM(argvals, y, fdParobj, family = 'binomial')
plot(fdobj)
library(pracma)
library(fda)
n       = 501
argvals = linspace(0,1,n)
y0      = sin(4*pi*argvals)
sig     = 0.5
y = matrix(0,n,1)
y[y0 + sig*randn(n,1) >= 0.0] = 1
basisobj = create.bspline.basis(c(0,1),13)
basismat = eval.basis(argvals, basisobj)
Lfdobj = int2Lfd(2)
penmat = eval.penalty(basisobj,Lfdobj)
lambda  = 1e-4
lamRmat = lambda*penmat
glmResult = glm.fda(basismat, y, 'binomial', lamRmat)
fdobj = fd(glmResult$coef,basisobj)
plotfit.fd(y, argvals, fdobj)
fdParobj = fdPar(basisobj, Lfdobj, lambda)
smoothResult = smooth.GLM(argvals, y, fdParobj, family = 'binomial')
plot(fdobj)
smoothResult$beta
smoothResult$df
smoothResult$gcv
smoothResult$SSE
smoothResult$dev
n = 101
argvals = linspace(0,2*pi,n)
y0 = sin(2*argvals)
sig = 0.2
y = y0 + sig.*randn(n,1)
y = exp(y)
n = 101
argvals = linspace(0,2*pi,n)
y0 = sin(2*argvals)
sig = 0.2
y = y0 + sig*randn(n,1)
y = exp(y)
basisobj = create.bspline.basis([0,2*pi],53)
basisobj = create.bspline.basis(c(0,2*pi),53)
lambda = 1e-1
Lfdobj = int2Lfd(2)
fdParobj = fdPar(basisobj, Lfdobj, lambda)
n = 101
argvals = linspace(0,2*pi,n)
y0 = sin(2*argvals)
sig = 0.2
y = y0 + sig*randn(n,1)
y = exp(y)
basisobj = create.bspline.basis(c(0,2*pi),53)
lambda = 1e-1
Lfdobj = int2Lfd(2)
fdParobj = fdPar(basisobj, Lfdobj, lambda)
smoothResult = smooth.basis.GLM(argvals, y, fdParobj, family =  'poisson')
plotfit.fd(log(y), argvals, fdobj)
smoothResult$beta
smoothResult$df
smoothResult$gcv
smoothResult$SSE
smoothResult$dev
smoothResult = smooth.GLM(argvals, y, fdParobj, family =  'poisson')
smoothResult = smooth.GLM(argvals, y, fdParobj, family =  'poisson')
